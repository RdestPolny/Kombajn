import streamlit as st
import sqlite3
import pandas as pd
import requests
from requests.auth import HTTPBasicAuth
from datetime import datetime, timedelta, date
import json
import os
from cryptography.fernet import Fernet
import base64
# Nowy import dla Google Gemini
from google import genai
import openai
from concurrent.futures import ThreadPoolExecutor, as_completed
from urllib.parse import urlparse
import io
from PIL import Image

# --- KONFIGURACJA I INICJALIZACJA ---

# Klucz szyfrowania - mo≈ºesz go ustawiƒá w st.secrets jako ENCRYPTION_KEY
# Je≈õli nie jest ustawiony, u≈ºywa domy≈õlnego (niezalecane w produkcji)
SECRET_KEY_SEED = st.secrets.get("ENCRYPTION_KEY", "twoj-bardzo-dlugi-i-tajny-klucz-do-szyfrowania-konfiguracji")
KEY = base64.urlsafe_b64encode(SECRET_KEY_SEED.encode().ljust(32)[:32])
FERNET = Fernet(KEY)

def encrypt_data(data: str) -> bytes:
    return FERNET.encrypt(data.encode())

def decrypt_data(encrypted_data: bytes) -> str:
    """Deszyfruje dane. W przypadku b≈Çƒôdu zwraca None."""
    try:
        return FERNET.decrypt(encrypted_data).decode()
    except Exception as e:
        st.error(f"‚ö†Ô∏è Nie mo≈ºna odszyfrowaƒá has≈Ça. Mo≈ºliwe przyczyny: zmieniony klucz szyfrowania lub uszkodzone dane.")
        return None

# --- ZARZƒÑDZANIE BAZƒÑ DANYCH W PAMIƒòCI ---

def get_db_connection():
    if 'db_conn' not in st.session_state:
        st.session_state.db_conn = sqlite3.connect(":memory:", check_same_thread=False)
        init_db(st.session_state.db_conn)
    return st.session_state.db_conn

def init_db(conn):
    cursor = conn.cursor()
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS sites (
            id INTEGER PRIMARY KEY,
            name TEXT,
            url TEXT UNIQUE,
            username TEXT,
            app_password BLOB,
            image_style_prompt TEXT
        )
    """)
    cursor.execute("CREATE TABLE IF NOT EXISTS personas (id INTEGER PRIMARY KEY, name TEXT UNIQUE, description TEXT)")
    conn.commit()

def db_execute(conn, query, params=(), fetch=None):
    cursor = conn.cursor()
    cursor.execute(query, params)
    if fetch == "one": result = cursor.fetchone()
    elif fetch == "all": result = cursor.fetchall()
    else: result = None
    conn.commit()
    return result

# --- KLASA DO OBS≈ÅUGI WORDPRESS REST API ---
class WordPressAPI:
    def __init__(self, url, username, password):
        self.base_url = url.rstrip('/') + "/wp-json/wp/v2"
        self.auth = HTTPBasicAuth(username, password)

    def _make_request(self, endpoint, params=None, display_error=True):
        try:
            response = requests.get(f"{self.base_url}/{endpoint}", params=params, auth=self.auth, timeout=15)
            response.raise_for_status()
            return response.json(), response.headers
        except requests.exceptions.HTTPError as e:
            if display_error and e.response.status_code != 400:
                 st.error(f"B≈ÇƒÖd HTTP ({e.response.status_code}) przy '{endpoint}': {e.response.text}")
        except requests.exceptions.RequestException as e:
            if display_error: st.error(f"B≈ÇƒÖd po≈ÇƒÖczenia przy '{endpoint}': {e}")
        return None, {}

    def test_connection(self):
        try:
            response = requests.get(f"{self.base_url}/users/me", auth=self.auth, timeout=10)
            response.raise_for_status()
            return True, "Po≈ÇƒÖczenie udane!"
        except requests.exceptions.HTTPError as e:
            error_details = ""
            try:
                error_json = e.response.json()
                error_details = f"\nKod b≈Çƒôdu: {error_json.get('code', 'N/A')}\nWiadomo≈õƒá: {error_json.get('message', 'N/A')}"
            except:
                error_details = f"\nOdpowied≈∫: {e.response.text[:200]}"
            
            if e.response.status_code == 401:
                return False, f"""‚ùå B≈ÇƒÖd autoryzacji (401){error_details}

Mo≈ºliwe przyczyny:
1. Has≈Ço aplikacji jest nieprawid≈Çowe
2. Has≈Ça aplikacji nie sƒÖ w≈ÇƒÖczone w WordPress (sprawd≈∫: U≈ºytkownicy ‚Üí Profil)
3. Login jest nieprawid≈Çowy
4. Has≈Ço ma nieprawid≈Çowy format (spr√≥buj usunƒÖƒá spacje)

üí° Wskaz√≥wka: Wygeneruj NOWE has≈Ço aplikacji w WordPress i skopiuj je dok≈Çadnie."""
            
            return False, f"B≈ÇƒÖd HTTP ({e.response.status_code}){error_details}"
        except requests.exceptions.RequestException as e: 
            return False, f"B≈ÇƒÖd po≈ÇƒÖczenia: {e}"

    def get_stats(self):
        try:
            data, headers = self._make_request("posts", params={"per_page": 1})
            total_posts = int(headers.get('X-WP-Total', 0))
            last_post_date = "Brak" if not data else datetime.fromisoformat(data[0]['date']).strftime('%Y-%m-%d %H:%M')
            return {"total_posts": total_posts, "last_post_date": last_post_date}
        except Exception: return {"total_posts": "B≈ÇƒÖd", "last_post_date": "B≈ÇƒÖd"}

    def get_all_posts_since(self, start_date):
        all_posts = []
        page = 1
        while True:
            params = {"per_page": 100, "page": page, "after": start_date.isoformat(), "orderby": "date", "order": "asc"}
            posts_data, _ = self._make_request("posts", params=params, display_error=False)
            if not posts_data: break
            all_posts.extend(posts_data)
            page += 1
        return all_posts

    def get_categories(self):
        data, _ = self._make_request("categories", params={"per_page": 100})
        return {cat['name']: cat['id'] for cat in data} if data else {}

    def get_users(self):
        data, _ = self._make_request("users", params={"per_page": 100, "roles": "administrator,editor,author"}, display_error=False)
        return {user['name']: user['id'] for user in data} if data else {}

    def get_posts(self, per_page=50):
        posts_data, _ = self._make_request("posts", params={"per_page": per_page, "orderby": "date", "_embed": True})
        if not posts_data: return []
        is_embedded = '_embedded' in posts_data[0]
        if is_embedded:
            final_posts = []
            for item in posts_data:
                author_name = item['_embedded']['author'][0].get('name', 'N/A')
                author_id = item['_embedded']['author'][0].get('id', 0)
                categories = [t.get('name', '') for tl in item['_embedded'].get('wp:term', []) for t in tl if t.get('taxonomy') == 'category']
                final_posts.append({"id": item['id'], "title": item['title']['rendered'], "date": datetime.fromisoformat(item['date']).strftime('%Y-%m-%d %H:%M'), "author_name": author_name, "author_id": author_id, "categories": ", ".join(filter(None, categories))})
            return final_posts
        else:
            st.warning("Serwer nie zwr√≥ci≈Ç osadzonych danych. DociƒÖganie informacji...")
            author_ids = {p['author'] for p in posts_data}
            author_map = {}
            for author_id in author_ids:
                user_data, _ = self._make_request(f"users/{author_id}", display_error=False)
                if user_data:
                    author_map[author_id] = user_data.get('name', 'N/A')
            category_ids = {cid for p in posts_data for cid in p['categories']}
            cat_data, _ = self._make_request("categories", params={"include": ",".join(map(str, category_ids))})
            category_map = {cat['id']: cat['name'] for cat in cat_data or []}
            final_posts = []
            for p in posts_data:
                final_posts.append({"id": p['id'], "title": p['title']['rendered'], "date": datetime.fromisoformat(p['date']).strftime('%Y-%m-%d %H:%M'), "author_name": author_map.get(p['author'], 'N/A'), "author_id": p['author'], "categories": ", ".join(filter(None, [category_map.get(cid, '') for cid in p['categories']]))})
            return final_posts

    def upload_image_from_bytes(self, image_bytes, filename):
        try:
            files = {'file': (filename, image_bytes, 'image/png')}
            upload_response = requests.post(f"{self.base_url}/media", files=files, auth=self.auth, timeout=30)
            upload_response.raise_for_status()
            return upload_response.json().get('id')
        except requests.exceptions.HTTPError as e:
            st.warning(f"Nie uda≈Ço siƒô wgraƒá obrazka '{filename}'. B≈ÇƒÖd HTTP ({e.response.status_code}): {e.response.text}")
            return None
        except Exception as e:
            st.warning(f"Nie uda≈Ço siƒô wgraƒá obrazka z bajt√≥w: {filename}. B≈ÇƒÖd og√≥lny: {e}")
            return None

    def update_post(self, post_id, data):
        try:
            response = requests.post(f"{self.base_url}/posts/{post_id}", json=data, auth=self.auth, timeout=15)
            response.raise_for_status()
            return True, f"Wpis ID {post_id} zaktualizowany."
        except requests.exceptions.HTTPError as e: return False, f"B≈ÇƒÖd aktualizacji wpisu ID {post_id} ({e.response.status_code}): {e.response.text}"
        except requests.exceptions.RequestException as e: return False, f"B≈ÇƒÖd sieci przy aktualizacji wpisu ID {post_id}: {e}"

    def publish_post(self, title, content, status, publish_date, category_ids, tags, author_id=None, featured_image_bytes=None, meta_title=None, meta_description=None):
        post_data = {'title': title, 'content': content, 'status': status, 'date': publish_date, 'categories': category_ids, 'tags': tags}
        if author_id: post_data['author'] = int(author_id)
        if featured_image_bytes:
            media_id = self.upload_image_from_bytes(featured_image_bytes, f"featured-image-{datetime.now().timestamp()}.png")
            if media_id: post_data['featured_media'] = media_id
        if meta_title or meta_description:
            post_data['meta'] = { "rank_math_title": meta_title, "rank_math_description": meta_description, "_aioseo_title": meta_title, "_aioseo_description": meta_description, "_yoast_wpseo_title": meta_title, "_yoast_wpseo_metadesc": meta_description }
        try:
            response = requests.post(f"{self.base_url}/posts", json=post_data, auth=self.auth, timeout=20)
            response.raise_for_status()
            return True, f"Wpis opublikowany/zaplanowany! ID: {response.json()['id']}", response.json().get('link')
        except requests.exceptions.HTTPError as e: return False, f"B≈ÇƒÖd publikacji ({e.response.status_code}): {e.response.text}", None
        except requests.exceptions.RequestException as e: return False, f"B≈ÇƒÖd sieci podczas publikacji: {e}", None

# --- LOGIKA GENEROWANIA TRE≈öCI I PROMPTY ---

HTML_RULES = """ZASADY FORMATOWANIA HTML (KRYTYCZNE):
- NIE U≈ªYWAJ znacznika <h1> - NIGDY
- U≈ªYWAJ WY≈ÅƒÑCZNIE: <h2>, <h3>, <p>, <b>, <strong>, <ul>, <ol>, <li>, <table>, <tr>, <th>, <td>
- Nag≈Ç√≥wki <h2> jako g≈Ç√≥wne sekcje, <h3> jako podsekcje
- Unikaj nadmiernego u≈ºywania list - stosuj je tylko dla krok√≥w, por√≥wna≈Ñ i kluczowych punkt√≥w
- U≈ºywaj prostej interpunkcji: kropki, przecinki, ≈õredniki. Unikaj ozdobnych symboli (‚Üí, ‚òÖ, !!!)
- Ka≈ºdy akapit <p> powinien zawieraƒá 2-4 zdania maksymalnie
- Tabele <table> dla por√≥wna≈Ñ i danych liczbowych"""

SYSTEM_PROMPT_BASE = f"""Jeste≈õ ekspertem SEO i copywriterem specjalizujƒÖcym siƒô w tworzeniu tre≈õci zoptymalizowanych pod AI search (GEO/AIO). Piszesz w jƒôzyku polskim.

ABSOLUTNIE ZABRONIONE W ODPOWIEDZI:
- Jakiekolwiek komentarze, wyja≈õnienia lub meta-informacje
- Frazy typu: "Oto artyku≈Ç", "Poni≈ºej przedstawiam", "Mam nadziejƒô"
- Znaczniki markdown (```) lub otaczanie kodu
- Powtarzanie tytu≈Çu artyku≈Çu w tre≈õci
- Wprowadzenia techniczne

WYMAGANY FORMAT ODPOWIEDZI:
- Zwr√≥ƒá WY≈ÅƒÑCZNIE gotowy artyku≈Ç w czystym HTML
- Rozpocznij bezpo≈õrednio pierwszym znacznikiem HTML (najczƒô≈õciej <h2>)
- Zako≈Ñcz ostatnim zamykajƒÖcym znacznikiem HTML

{HTML_RULES}

ZASADY OPTYMALIZACJI POD AI SEARCH:
1. STRUKTURA = Modu≈Çowo≈õƒá - AI parsuje tre≈õƒá na ma≈Çe fragmenty
2. JASNO≈öƒÜ semantyczna - Konkretne fakty zamiast og√≥lnik√≥w
3. SNIPPABLE content - Ka≈ºde zdanie samodzielne i gotowe do wyciƒÖgniƒôcia
4. Format Q&A - Bezpo≈õrednie pytania z kr√≥tkimi odpowiedziami (1-2 zdania)
5. U≈ºywaj synonim√≥w i powiƒÖzanych termin√≥w dla wzmocnienia kontekstu"""

DEFAULT_MASTER_PROMPT_TEMPLATE = """# ROLA I EKSPERTYZA
{{PERSONA_DESCRIPTION}}

Twoim celem jest stworzenie artyku≈Çu zoptymalizowanego pod AI search (Google SGE, Bing Copilot, ChatGPT) na temat: "{{TEMAT_ARTYKULU}}"

# KLASYFIKACJA I D≈ÅUGO≈öƒÜ
Temat zosta≈Ç sklasyfikowany jako: {{ANALIZA_TEMATU}}
- SZEROKI temat: artyku≈Ç 2500-4000 s≈Ç√≥w, wyczerpujƒÖcy pillar content
- WƒÑSKI temat: artyku≈Ç 800-1500 s≈Ç√≥w, precyzyjna odpowied≈∫ na konkretne pytanie

# GRUPA DOCELOWA
Piszesz dla: {{GRUPA_DOCELOWA}}

# KLUCZOWA ZASADA: ANSWER-FIRST (Odwr√≥cona piramida)
Pierwszy akapit MUSI zawieraƒá bezpo≈õredniƒÖ, zwiƒôz≈ÇƒÖ odpowied≈∫ na g≈Ç√≥wne pytanie z tematu. U≈ºytkownik i AI muszƒÖ natychmiast uzyskaƒá warto≈õƒá.

# STRUKTURA ARTYKU≈ÅU - OPTYMALIZACJA POD AI PARSING

## 1. NAG≈Å√ìWKI (H2/H3) - Jasne granice sekcji
- Ka≈ºdy H2 = nowy modu≈Ç tre≈õci, kt√≥ry AI mo≈ºe wyciƒÖgnƒÖƒá samodzielnie
- U≈ºywaj pyta≈Ñ jako nag≈Ç√≥wk√≥w: "Jak dzia≈Ça X?", "Dlaczego Y jest wa≈ºne?", "Czym r√≥≈ºni siƒô A od B?"
- ZABRONIONE nag≈Ç√≥wki og√≥lne: "Dowiedz siƒô wiƒôcej", "Podsumowanie", "Wprowadzenie"

ROZWI≈É TE ZAGADNIENIA (jako sekcje H2/H3):
{{ZAGADNIENIA_KLUCZOWE}}

## 2. SEKCJA "REASONING" (KRYTYCZNA dla AI Passage Ranking)
Jedno z zagadnie≈Ñ MUSI byƒá szczeg√≥≈Çowym wyja≈õnieniem "Jak to dzia≈Ça?" lub "Dlaczego?" z konkretnymi krokami:
- U≈ºywaj numerowanych list dla proces√≥w krok po kroku
- Ka≈ºdy krok = samodzielne zdanie z kontekstem
- Przyk≈Çad: "Krok 1: Silnik analizuje dane wej≈õciowe i por√≥wnuje je z bazƒÖ 50 000 wzorc√≥w."

## 3. FORMAT Q&A (Minimum 3-5 par pytanie-odpowied≈∫)
Umie≈õƒá w artykule bezpo≈õrednie pytania z kr√≥tkimi odpowiedziami:
- Pytanie jako <h3>
- Odpowied≈∫ w <p>: maksymalnie 1-2 zdania, self-contained (zrozumia≈Ça poza kontekstem)
- Przyk≈Çad:
  <h3>Jak g≈Ço≈õno pracuje zmywarka?</h3>
  <p>Zmywarka pracuje na poziomie 42 dB, co jest cichsze ni≈º wiƒôkszo≈õƒá modeli na rynku.</p>

## 4. LISTY I TABELE - Czyste, snippable fragmenty
- Listy <ul>/<ol>: TYLKO dla krok√≥w, por√≥wna≈Ñ, top 3-5 fakt√≥w
- NIE u≈ºywaj list jako g≈Ç√≥wnej formy tre≈õci
- Tabele <table>: idealne do por√≥wna≈Ñ funkcji, cen, parametr√≥w technicznych
  
Przyk≈Çad tabeli:
<table>
<tr><th>Funkcja</th><th>Model A</th><th>Model B</th></tr>
<tr><td>Poziom ha≈Çasu</td><td>42 dB</td><td>48 dB</td></tr>
<tr><td>Certyfikat Energy Star</td><td>Tak</td><td>Nie</td></tr>
</table>

# SEMANTYCZNA JASNO≈öƒÜ I E-E-A-T

## Regu≈Ça: KONKRET zamiast OG√ìLNIKA
‚ùå Z≈ÅE: "Ta zmywarka jest innowacyjna i ekologiczna"
‚úÖ DOBRE: "Zmywarka zu≈ºywa 9 litr√≥w wody na cykl (o 30% mniej ni≈º ≈õrednia) i posiada certyfikat Energy Star"

## U≈ºywaj mierzalnych danych:
- Liczby: "wzrost o 25%", "temperatura 65¬∞C", "czas 90 minut"
- Normy i certyfikaty: "Energy Star", "CE", "IP67"
- Por√≥wnania: "3x szybszy ni≈º X", "o 40% cichszy od Y"

## KONTEKST i SYNONIMY (Semantic Reinforcement)
Naturnie wpleƒá powiƒÖzane terminy, aby AI rozumia≈Ço szerszy kontekst:

G≈Ç√≥wne s≈Çowa kluczowe: {{SLOWA_KLUCZOWE}}
Frazy semantyczne wspierajƒÖce: {{DODATKOWE_SLOWA_SEMANTYCZNE}}

RELACJE LEKSYKALNE (wzmocnienie zrozumienia przez AI):
- Synonimy (u≈ºywaj zamiennie): {{SYNOMINY}}
- Hiperonimy (szerszy kontekst): {{HIPERONIMY}}
  Przyk≈Çad: dla "rower" u≈ºyj te≈º "pojazd", "≈õrodek transportu"
- Hiponimy (konkretne przyk≈Çady): {{HIPONIMY}}
  Przyk≈Çad: dla "rower" wymie≈Ñ "rower g√≥rski", "rower szosowy", "rower elektryczny"

## E-E-A-T Signals (Experience, Expertise, Authoritativeness, Trust)
- DO≈öWIADCZENIE: "Z mojej praktyki...", "Podczas test√≥w zauwa≈ºy≈Çem..."
- EKSPERTYZA: Precyzyjna terminologia + proste wyja≈õnienia
- AUTORYTATYWNO≈öƒÜ: Pewny ton, zdecydowane stwierdzenia
- ZAUFANIE: Transparentno≈õƒá, wspomnienie ogranicze≈Ñ: "Nie jest idealny dla...", "WadƒÖ jest..."

# FORMATOWANIE POD AI PARSING

## Interpunkcja - PROSTOTA
- U≈ºywaj kropek i przecink√≥w konsekwentnie
- Unikaj my≈õlnik√≥w em dash (‚Äî) - lepiej u≈ºyj kropki lub ≈õrednika
- ZABRONIONE: ozdobne symbole ‚Üí, ‚òÖ, !!!, ===

## D≈Çugo≈õƒá zda≈Ñ
- Jedno zdanie = jedna idea (max 20-25 s≈Ç√≥w)
- Akapit = 2-4 zdania
- UNIKAJ ≈õcian tekstu - rozbijaj na kr√≥tkie paragrafy

## Self-Contained Sentences (Snippable)
Ka≈ºde zdanie MUSI mieƒá sens wyrwane z kontekstu:
‚ùå Z≈ÅE: "Jest to bardzo wa≈ºne dla wydajno≈õci."
‚úÖ DOBRE: "Regularne czyszczenie filtra zwiƒôksza wydajno≈õƒá zmywarki o 15%."

# KO≈ÉCOWE WYMAGANIA

1. **Zacznij od answer-first**: Pierwszy akapit = bezpo≈õrednia odpowied≈∫
2. **Zastosuj strukturƒô modu≈ÇowƒÖ**: H2/H3, Q&A, listy, tabele
3. **Pisz snippable**: Ka≈ºde zdanie samodzielne i konkretne
4. **Wzmocnij semantycznie**: Synonimy, kontekst, mierzalne dane
5. **Unikaj og√≥lnik√≥w**: Zawsze konkret zamiast "innowacyjny", "najlepszy"
6. **Prosty jƒôzyk techniczny**: Wyja≈õniaj terminy, ale nie infantylizuj

ROZPOCZNIJ PISANIE ARTYKU≈ÅU TERAZ. Pamiƒôtaj: TYLKO HTML, ≈ºadnych komentarzy ani wprowadze≈Ñ."""

DEFAULT_BRIEF_PROMPT_TEMPLATE = """Jeste≈õ ≈õwiatowej klasy strategiem tre≈õci SEO specjalizujƒÖcym siƒô w optymalizacji pod AI search (GEO/AIO).

Twoim zadaniem jest stworzenie szczeg√≥≈Çowego briefu dla artyku≈Çu zoptymalizowanego pod systemy AI (Google SGE, Bing Copilot, ChatGPT).

# KROK 1: ANALIZA TEMATU I INTENCJI
Przeanalizuj temat: "{{TOPIC}}"

Okre≈õl:
1. **Z≈Ço≈ºono≈õƒá**: SZEROKI (wymaga wyczerpujƒÖcego pillar page) czy WƒÑSKI (odpowied≈∫ na konkretne pytanie)
2. **Intencja wyszukiwania**: Informacyjna, transakcyjna, nawigacyjna, komercyjna
3. **Typ odpowiedzi AI**: Czy to bƒôdzie quick answer, step-by-step guide, comparison, czy comprehensive overview

# KROK 2: BRIEF W FORMACIE JSON

**KRYTYCZNA ZASADA**: Klucz `temat_artykulu` MUSI byƒá DOK≈ÅADNIE taki sam jak {{TOPIC}}

Struktura JSON:

{
  "temat_artykulu": "{{TOPIC}}",
  
  "analiza_tematu": "Kr√≥tki opis (2-3 zdania): czy SZEROKI czy WƒÑSKI, jaka intencja, dlaczego AI bƒôdzie parsowaƒá tƒô tre≈õƒá",
  
  "grupa_docelowa": "Dla kogo: poziom wiedzy, potrzeby, kontekst u≈ºycia",
  
  "zagadnienia_kluczowe": [
    // TEMAT SZEROKI: 5-7 zagadnie≈Ñ (H2)
    // TEMAT WƒÑSKI: 2-4 zagadnienia (H2)
    // Formu≈Çuj jako pytania: "Jak dzia≈Ça X?", "Czym r√≥≈ºni siƒô A od B?"
    // JEDNO zagadnienie MUSI byƒá typu "Dlaczego..." lub "Jak krok po kroku..."
    "Jak dzia≈Ça mechanizm X?",
    "Dlaczego Y jest kluczowe dla Z?",
    "Czym r√≥≈ºni siƒô A od B?" 
  ],
  
  "slowa_kluczowe": [
    // 5-10 g≈Ç√≥wnych s≈Ç√≥w/fraz kluczowych
    // Priorytet dla long-tail keywords (3-5 s≈Ç√≥w)
  ],
  
  "dodatkowe_slowa_semantyczne": [
    // 5-10 fraz semantycznie wspierajƒÖcych g≈Ç√≥wny temat
    // Kolokacje, pytania u≈ºytkownik√≥w, powiƒÖzane koncepcje
    // Przyk≈Çad dla "zmywarka": "zu≈ºycie wody", "poziom ha≈Çasu", "pojemno≈õƒá za≈Çadunku"
  ],
  
  "relacje_leksykalne": {
    "synonimy": [
      // 3-5 synonim√≥w g≈Ç√≥wnego s≈Çowa kluczowego
      // AI u≈ºyje ich zamiennie dla wzmocnienia kontekstu
    ],
    "hiperonimy": [
      // 2-3 termin√≥w og√≥lniejszych, nadrzƒôdnych
      // Przyk≈Çad: dla "rower elektryczny" -> "rower", "pojazd"
    ],
    "hiponimy": [
      // 2-3 termin√≥w bardziej szczeg√≥≈Çowych, podrzƒôdnych
      // Przyk≈Çad: dla "zmywarka" -> "zmywarka do zabudowy", "zmywarka wolnostojƒÖca"
    ]
  }
}

**WYGENERUJ WY≈ÅƒÑCZNIE KOMPLETNY I POPRAWNY JSON** dla tematu: "{{TOPIC}}"

Nie dodawaj komentarzy poza strukturƒÖ JSON."""

def call_gpt5_nano(api_key, prompt):
    """Wywo≈Çanie modelu GPT-5-nano"""
    client = openai.OpenAI(api_key=api_key)
    response = client.chat.completions.create(
        model="gpt-5-nano",
        messages=[{"role": "user", "content": prompt}]
    )
    return response.choices[0].message.content

def generate_article_single_pass(api_key, title, prompt):
    """
    Generowanie artyku≈Çu w JEDNYM wywo≈Çaniu API.
    Zwraca: (title, article_html)
    """
    try:
        full_prompt = f"{SYSTEM_PROMPT_BASE}\n\n---ZADANIE---\n{prompt}\n\nROZPOCZNIJ PISANIE ARTYKU≈ÅU. TYLKO HTML, BEZ KOMENTARZY."
        
        article_html = call_gpt5_nano(api_key, full_prompt)
        
        # Dodatkowe czyszczenie na wypadek, gdyby AI doda≈Ço markdown
        article_html = article_html.strip()
        article_html = article_html.replace("```html", "").replace("```", "")
        
        return title, article_html.strip()
    except Exception as e:
        return title, f"<p><strong>B≈ÅƒÑD KRYTYCZNY podczas generowania artyku≈Çu:</strong> {str(e)}</p>"

def generate_article_dispatcher(model, api_key, title, prompt):
    """Dispatcher - obecnie obs≈Çuguje tylko gpt-5-nano"""
    try:
        if model == "gpt-5-nano":
            return generate_article_single_pass(api_key, title, prompt)
        else:
            return title, f"<p><strong>B≈ÅƒÑD: Nieobs≈Çugiwany model '{model}'</strong></p>"
    except Exception as e:
        return title, f"<p><strong>B≈ÅƒÑD KRYTYCZNY:</strong> {str(e)}</p>"

def generate_image_prompt_gpt5(api_key, article_title, style_prompt):
    prompt = f"""Jeste≈õ art directorem. Twoim zadaniem jest stworzenie kr√≥tkiego promptu do generatora obraz√≥w AI, ≈ÇƒÖczƒÖc temat artyku≈Çu z podanym stylem przewodnim.

# STYL PRZEWODNI (NAJWA≈ªNIEJSZY)
{style_prompt if style_prompt else "Brak specyficznego stylu, skup siƒô na fotorealizmie."}

# TEMAT ARTYKU≈ÅU DO WIZUALIZACJI
"{article_title}"

# KRYTYCZNE ZASADY - BEZWZGLƒòDNIE PRZESTRZEGAJ:
1. Prompt MUSI byƒá w jƒôzyku angielskim.
2. NIGDY nie u≈ºywaj s≈Ç√≥w zwiƒÖzanych z tekstem: NIE WOLNO u≈ºyƒá s≈Ç√≥w takich jak: text, words, letters, typography, caption, title, etc.
3. Zamiast abstrakcyjnych koncept√≥w u≈ºywaj konkretnych, wizualnych obiekt√≥w/scen.
4. Finalny prompt musi zaczynaƒá siƒô od "photorealistic, ...", a ko≈Ñczyƒá na "no text, no letters, no writing".
5. Zintegruj styl przewodni z wizualizacjƒÖ tematu w sp√≥jny, artystyczny spos√≥b.

Wygeneruj TYLKO gotowy prompt (1-2 zdania)."""
    return call_gpt5_nano(api_key, prompt).strip()

def generate_image_gemini(api_key, image_prompt, aspect_ratio="4:3"):
    try:
        if aspect_ratio not in image_prompt: image_prompt = f"{aspect_ratio} aspect ratio, {image_prompt}"
        if "no text" not in image_prompt.lower(): image_prompt += ", no text, no letters, no writing, no typography"

        client = genai.Client(api_key=api_key)
        response = client.models.generate_content(model="gemini-2.5-flash-image-preview", contents=[image_prompt])

        if response.candidates:
            for part in response.candidates[0].content.parts:
                if part.inline_data is not None: return part.inline_data.data, None

        return None, f"API nie zwr√≥ci≈Ço obrazka. Sprawd≈∫ prompt: {image_prompt}"
    except Exception as e:
        return None, f"Krytyczny b≈ÇƒÖd podczas komunikacji z API Gemini: {e}"

def generate_brief_and_image(openai_api_key, google_api_key, topic, aspect_ratio, style_prompt, brief_template):
    try:
        final_brief_prompt = brief_template.replace("{{TOPIC}}", topic)
        json_string = call_gpt5_nano(openai_api_key, final_brief_prompt).strip().replace("```json", "").replace("```", "")
        brief_data = json.loads(json_string)
    except Exception as e:
        return topic, {"error": f"B≈ÇƒÖd krytyczny podczas generowania briefu: {str(e)}"}, None, None

    try:
        image_prompt = generate_image_prompt_gpt5(openai_api_key, brief_data['temat_artykulu'], style_prompt)
        st.info(f"Generowanie obrazka dla: {brief_data['temat_artykulu']}...")
        st.caption(f"Prompt obrazka: {image_prompt}")
        image_bytes, image_error = generate_image_gemini(google_api_key, image_prompt, aspect_ratio)
        return topic, brief_data, image_bytes, image_error
    except Exception as e:
        return topic, brief_data, None, f"B≈ÇƒÖd podczas generowania promptu/obrazka: {e}"

def generate_meta_tags_gpt5(api_key, article_title, article_content, keywords):
    try:
        prompt = f"""Jeste≈õ ekspertem SEO copywritingu. Przeanalizuj poni≈ºszy artyku≈Ç i stw√≥rz do niego idealne meta tagi zoptymalizowane pod AI search.

Temat g≈Ç√≥wny: {article_title}
S≈Çowa kluczowe: {", ".join(keywords)}
Tre≈õƒá artyku≈Çu (fragment): {article_content[:2500]}

ZASADY:
- Meta title: max 60 znak√≥w, zawiera g≈Ç√≥wne s≈Çowo kluczowe, przyciƒÖgajƒÖcy
- Meta description: max 155 znak√≥w, answer-first (bezpo≈õrednia odpowied≈∫), call-to-action

Zwr√≥ƒá odpowied≈∫ WY≈ÅƒÑCZNIE w formacie JSON z dwoma kluczami: "meta_title" i "meta_description"."""
        
        json_string = call_gpt5_nano(api_key, prompt).strip().replace("```json", "").replace("```", "")
        return json.loads(json_string)
    except Exception as e:
        return {"meta_title": article_title[:60], "meta_description": f"Kompleksowy przewodnik: {article_title}"[:155]}

# --- INTERFEJS U≈ªYTKOWNIKA (STREAMLIT) ---

st.set_page_config(layout="wide", page_title="PBN Manager - AI Search Optimized")

if 'master_prompt' not in st.session_state: st.session_state.master_prompt = DEFAULT_MASTER_PROMPT_TEMPLATE
if 'brief_prompt' not in st.session_state: st.session_state.brief_prompt = DEFAULT_BRIEF_PROMPT_TEMPLATE
if 'menu_choice' not in st.session_state: st.session_state.menu_choice = "Dashboard"
if 'generated_articles' not in st.session_state: st.session_state.generated_articles = []
if 'generated_briefs' not in st.session_state: st.session_state.generated_briefs = []

st.title("üöÄ PBN Manager - AI Search Optimized")
st.caption("Centralne zarzƒÖdzanie i generowanie tre≈õci zoptymalizowanych pod AI search (GEO/AIO)")

conn = get_db_connection()

st.sidebar.header("Menu G≈Ç√≥wne")
menu_options = ["Dashboard", "ZarzƒÖdzanie Stronami", "ZarzƒÖdzanie Personami", "üó∫Ô∏è Strateg Tematyczny", "Generator Brief√≥w", "Generowanie Tre≈õci", "Harmonogram Publikacji", "ZarzƒÖdzanie Tre≈õciƒÖ", "‚öôÔ∏è Edytor Prompt√≥w"]

# --- POPRAWIONA LOGIKA DO PROGRAMOWEJ NAWIGACJI ---
default_index = 0
if 'go_to_page' in st.session_state:
    try:
        default_index = menu_options.index(st.session_state.go_to_page)
        del st.session_state.go_to_page
    except ValueError:
        default_index = 0

st.sidebar.radio("Wybierz sekcjƒô:", menu_options, key='menu_choice', index=default_index)

st.sidebar.header("Konfiguracja API")
openai_api_key = st.secrets.get("OPENAI_API_KEY", "") or st.sidebar.text_input("Klucz OpenAI API", type="password")
google_api_key = st.secrets.get("GOOGLE_API_KEY", "") or st.sidebar.text_input("Klucz Google AI API", type="password")

with st.sidebar.expander("‚ÑπÔ∏è Klucz szyfrowania"):
    st.info("""
    Has≈Ça sƒÖ szyfrowane kluczem. Domy≈õlny klucz: zahardkodowany w kodzie.
    
    **Zalecane**: Ustaw w≈Çasny klucz w `st.secrets`:
    ```
    ENCRYPTION_KEY = "twoj-unikalny-bardzo-tajny-klucz-min-32-znaki"
    ```
    
    ‚ö†Ô∏è **UWAGA**: Zmiana klucza uniemo≈ºliwi odszyfrowanie starych hase≈Ç!
    """)

with st.sidebar.expander("ZarzƒÖdzanie KonfiguracjƒÖ (Plik JSON)"):
    uploaded_file = st.file_uploader("Za≈Çaduj plik konfiguracyjny", type="json", key="config_uploader")
    if uploaded_file is not None:
        if uploaded_file.file_id != st.session_state.get('last_uploaded_file_id', ''):
            try:
                config_data = json.load(uploaded_file)
                db_execute(conn, "DELETE FROM sites")
                db_execute(conn, "DELETE FROM personas")

                for site in config_data.get('sites', []):
                    encrypted_password_bytes = base64.b64decode(site['app_password_b64'])
                    style_prompt = site.get('image_style_prompt', '')
                    db_execute(conn,
                        "INSERT INTO sites (name, url, username, app_password, image_style_prompt) VALUES (?, ?, ?, ?, ?)",
                        (site['name'], site['url'], site['username'], encrypted_password_bytes, style_prompt)
                    )

                for persona in config_data.get('personas', []):
                    db_execute(conn, "INSERT INTO personas (name, description) VALUES (?, ?)", (persona['name'], persona['description']))

                st.session_state.last_uploaded_file_id = uploaded_file.file_id
                st.success(f"Pomy≈õlnie za≈Çadowano {len(config_data.get('sites',[]))} stron i {len(config_data.get('personas',[]))} person!")
                st.rerun()
            except Exception as e:
                st.error(f"B≈ÇƒÖd podczas przetwarzania pliku: {e}")

    sites_for_export = db_execute(conn, "SELECT name, url, username, app_password, image_style_prompt FROM sites", fetch="all")
    personas_for_export = db_execute(conn, "SELECT name, description FROM personas", fetch="all")
    if sites_for_export or personas_for_export:
        export_data = {'sites': [], 'personas': []}
        for name, url, username, encrypted_pass_bytes, style_prompt in sites_for_export:
            encrypted_pass_b64 = base64.b64encode(encrypted_pass_bytes).decode('utf-8')
            export_data['sites'].append({
                'name': name,
                'url': url,
                'username': username,
                'app_password_b64': encrypted_pass_b64,
                'image_style_prompt': style_prompt
            })
        for name, description in personas_for_export:
            export_data['personas'].append({'name': name, 'description': description})
        st.download_button(label="Pobierz konfiguracjƒô", data=json.dumps(export_data, indent=2), file_name="pbn_config.json", mime="application/json")

# --- G≈Å√ìWNA LOGIKA WY≈öWIETLANIA STRON ---

if st.session_state.menu_choice == "ZarzƒÖdzanie Stronami":
    st.header("üîó ZarzƒÖdzanie Stronami i KonfiguracjƒÖ")
    st.subheader("Dodaj nowƒÖ stronƒô")
    with st.expander("‚ÑπÔ∏è Jak wygenerowaƒá has≈Ço aplikacji WordPress?", expanded=False):
        st.markdown("""
        1. Zaloguj siƒô do WordPress jako administrator
        2. Przejd≈∫ do: **U≈ºytkownicy ‚Üí Profil**
        3. Przewi≈Ñ na d√≥≈Ç do sekcji **"Has≈Ça aplikacji"** (Application Passwords)
        4. Wprowad≈∫ nazwƒô (np. "PBN Manager")
        5. Kliknij **"Dodaj nowe has≈Ço aplikacji"**
        6. Skopiuj wygenerowane has≈Ço **dok≈Çadnie** (mo≈ºe zawieraƒá spacje - to OK)
        
        ‚ö†Ô∏è **Je≈õli nie widzisz sekcji "Has≈Ça aplikacji":**
        - WordPress musi byƒá w wersji 5.6+
        - Twoja strona musi u≈ºywaƒá HTTPS
        - Wtyczki bezpiecze≈Ñstwa mogƒÖ blokowaƒá tƒô funkcjƒô
        """)
    
    with st.form("add_site_form", clear_on_submit=True):
        name = st.text_input("Przyjazna nazwa strony")
        url = st.text_input("URL strony", placeholder="https://twojastrona.pl")
        username = st.text_input("Login WordPress")
        app_password = st.text_input("Has≈Ço Aplikacji", type="password", help="Skopiuj has≈Ço aplikacji ze spacjami lub bez - oba formaty dzia≈ÇajƒÖ")
        if st.form_submit_button("Testuj po≈ÇƒÖczenie i Zapisz", type="primary"):
            if all([name, url, username, app_password]):
                # Normalizacja has≈Ça - usu≈Ñ wszystkie bia≈Çe znaki (spacje, tabulatory, newlines)
                app_password_clean = ''.join(app_password.split())
                
                with st.spinner("Testowanie po≈ÇƒÖczenia..."):
                    api = WordPressAPI(url, username, app_password_clean)
                    success, message = api.test_connection()
                if success:
                    encrypted_password = encrypt_data(app_password_clean)
                    try:
                        db_execute(conn, "INSERT INTO sites (name, url, username, app_password, image_style_prompt) VALUES (?, ?, ?, ?, ?)", (name, url, username, encrypted_password, ""))
                        st.success(f"Strona '{name}' dodana!")
                        st.rerun()
                    except sqlite3.IntegrityError: st.error(f"Strona o URL '{url}' ju≈º istnieje.")
                else: st.error(f"Nie uda≈Ço siƒô dodaƒá strony. B≈ÇƒÖd: {message}")
            else: st.error("Wszystkie pola sƒÖ wymagane.")

    st.subheader("Lista za≈Çadowanych stron")
    sites = db_execute(conn, "SELECT id, name, url, username, image_style_prompt, app_password FROM sites", fetch="all")
    if not sites: st.info("Brak za≈Çadowanych stron.")
    else:
        for site_id, name, url, username, style_prompt, encrypted_pass in sites:
            # Sprawd≈∫ status deszyfrowania
            decryption_status = "‚úÖ OK"
            decrypted_test = decrypt_data(encrypted_pass)
            if decrypted_test is None:
                decryption_status = "‚ö†Ô∏è B≈ÅƒÑD HAS≈ÅA"
            
            with st.container(border=True):
                c1, c2, c3 = st.columns([2, 1, 1])
                c1.markdown(f"**{name}** (`{url}`)")
                c2.metric("Status has≈Ça", decryption_status)
                if c3.button("üóëÔ∏è Usu≈Ñ", key=f"delete_{site_id}", use_container_width=True):
                    db_execute(conn, "DELETE FROM sites WHERE id = ?", (site_id,))
                    st.rerun()

                # Je≈õli b≈ÇƒÖd deszyfrowania, poka≈º opcjƒô naprawy
                if decryption_status == "‚ö†Ô∏è B≈ÅƒÑD HAS≈ÅA":
                    with st.expander("üîß Napraw has≈Ço (ponowne wprowadzenie)", expanded=True):
                        st.warning("Has≈Ço nie mo≈ºe byƒá odszyfrowane. Wprowad≈∫ je ponownie.")
                        st.info("üí° Wygeneruj NOWE has≈Ço aplikacji w WordPress: U≈ºytkownicy ‚Üí Profil ‚Üí Has≈Ça aplikacji")
                        with st.form(f"fix_password_{site_id}"):
                            new_password = st.text_input("Nowe has≈Ço aplikacji", type="password", key=f"new_pass_{site_id}", help="Has≈Ço ze spacjami lub bez - oba formaty dzia≈ÇajƒÖ")
                            if st.form_submit_button("Testuj i Zaktualizuj has≈Ço"):
                                if new_password:
                                    # Normalizacja has≈Ça - usu≈Ñ wszystkie bia≈Çe znaki
                                    new_password_clean = ''.join(new_password.split())
                                    
                                    # Test po≈ÇƒÖczenia przed zapisaniem
                                    test_api = WordPressAPI(url, username, new_password_clean)
                                    success, message = test_api.test_connection()
                                    if success:
                                        encrypted_new = encrypt_data(new_password_clean)
                                        db_execute(conn, "UPDATE sites SET app_password = ? WHERE id = ?", (encrypted_new, site_id))
                                        st.success(f"‚úÖ Has≈Ço dla '{name}' zaktualizowane!")
                                        st.rerun()
                                    else:
                                        st.error(message)
                                else:
                                    st.error("Wprowad≈∫ has≈Ço.")

                with st.expander("Edytuj styl wizualny obrazk√≥w dla tej strony"):
                    new_style = st.text_area("Prompt stylu", value=style_prompt or "photorealistic, sharp focus, soft natural lighting", key=f"style_{site_id}", height=100, help="Opisz styl obrazk√≥w, np. 'minimalistyczny, flat design, pastelowe kolory' lub 'dramatyczne o≈õwietlenie, styl kinowy, wysoki kontrast'.")
                    if st.button("Zapisz styl", key=f"save_style_{site_id}"):
                        db_execute(conn, "UPDATE sites SET image_style_prompt = ? WHERE id = ?", (new_style, site_id))
                        st.success(f"Styl dla '{name}' zaktualizowany!")
                        st.rerun()

elif st.session_state.menu_choice == "Dashboard":
    st.header("üìä Dashboard Aktywno≈õci")
    sites_list = db_execute(conn, "SELECT id, name, url, username, app_password FROM sites", fetch="all")
    if not sites_list:
        st.warning("Brak za≈Çadowanych stron. Przejd≈∫ do 'ZarzƒÖdzanie Stronami'.")
    else:
        st.subheader("Liczba publikacji w czasie")
        time_range_options = {"Ostatnie 7 dni": 7, "Ostatnie 30 dni": 30, "Ostatnie 3 miesiƒÖce": 90}
        selected_range_label = st.radio("Wybierz zakres czasu", options=time_range_options.keys(), horizontal=True, label_visibility="collapsed")
        days_to_fetch = time_range_options[selected_range_label]

        @st.cache_data(ttl=600)
        def get_all_posts_for_dashboard(sites_tuple, days):
            start_date = datetime.now() - timedelta(days=days)
            all_posts_dates = []
            def fetch_site_posts(site_data):
                _, site_name, url, username, enc_pass = site_data
                try:
                    decrypted_pass = decrypt_data(enc_pass)
                    if decrypted_pass is None:
                        st.warning(f"‚ö†Ô∏è Pomi≈Ñ stronƒô '{site_name}' - nie mo≈ºna odszyfrowaƒá has≈Ça.")
                        return []
                    api = WordPressAPI(url, username, decrypted_pass)
                    return [p['date'] for p in api.get_all_posts_since(start_date)]
                except Exception as e:
                    st.warning(f"‚ö†Ô∏è B≈ÇƒÖd pobierania danych z '{site_name}': {e}")
                    return []

            with ThreadPoolExecutor() as executor:
                futures = {executor.submit(fetch_site_posts, site): site for site in sites_tuple}
                for future in as_completed(futures):
                    all_posts_dates.extend(future.result())
            return all_posts_dates

        with st.spinner(f"Pobieranie danych o publikacjach z {len(sites_list)} stron..."):
            post_data = get_all_posts_for_dashboard(tuple(sites_list), days_to_fetch)

        if not post_data:
            st.info("Brak opublikowanych wpis√≥w w wybranym okresie.")
        else:
            df_posts = pd.DataFrame(post_data, columns=['date'])
            df_posts['date_only'] = pd.to_datetime(df_posts['date']).dt.date
            posts_by_day = df_posts.groupby('date_only').size().reset_index(name='count')
            posts_by_day = posts_by_day.set_index('date_only')
            date_range = pd.date_range(start=date.today() - timedelta(days=days_to_fetch-1), end=date.today())
            posts_by_day = posts_by_day.reindex(date_range.date, fill_value=0)
            posts_by_day.index.name = "Data"
            posts_by_day.columns = ["Liczba publikacji"]
            st.bar_chart(posts_by_day)

        st.subheader("Og√≥lne statystyki")
        @st.cache_data(ttl=600)
        def get_summary_stats(sites_tuple):
            all_data = []
            for _, name, url, username, encrypted_pass in sites_tuple:
                decrypted_pass = decrypt_data(encrypted_pass)
                if decrypted_pass is None:
                    all_data.append({"Nazwa": name, "URL": url, "Liczba wpis√≥w": "‚ö†Ô∏è B≈ÇƒÖd has≈Ça", "Ostatni wpis": "N/A"})
                    continue
                try:
                    api = WordPressAPI(url, username, decrypted_pass)
                    stats = api.get_stats()
                    all_data.append({"Nazwa": name, "URL": url, "Liczba wpis√≥w": stats['total_posts'], "Ostatni wpis": stats['last_post_date']})
                except Exception as e:
                    all_data.append({"Nazwa": name, "URL": url, "Liczba wpis√≥w": f"B≈ÇƒÖd: {e}", "Ostatni wpis": "N/A"})
            return all_data

        if st.button("Od≈õwie≈º statystyki"): st.cache_data.clear()
        stats_data = get_summary_stats(tuple(sites_list))
        st.dataframe(pd.DataFrame(stats_data), use_container_width=True, hide_index=True)

elif st.session_state.menu_choice == "ZarzƒÖdzanie Personami":
    st.header("üé≠ ZarzƒÖdzanie Personami")
    with st.expander("Dodaj nowƒÖ Personƒô", expanded=True):
        with st.form("add_persona_form", clear_on_submit=True):
            persona_name = st.text_input("Nazwa Persony")
            persona_desc = st.text_area("Opis Persony", height=150, help="Opisz kim jest autor, jakie ma do≈õwiadczenie i styl.")
            if st.form_submit_button("Zapisz Personƒô"):
                if persona_name and persona_desc:
                    try:
                        db_execute(conn, "INSERT INTO personas (name, description) VALUES (?, ?)", (persona_name, persona_desc))
                        st.success(f"Persona '{persona_name}' zapisana!")
                    except sqlite3.IntegrityError: st.error(f"Persona o nazwie '{persona_name}' ju≈º istnieje.")
                else: st.error("Nazwa i opis nie mogƒÖ byƒá puste.")

    st.subheader("Lista zapisanych Person")
    personas = db_execute(conn, "SELECT id, name, description FROM personas", fetch="all")
    if not personas: st.info("Brak zapisanych Person.")
    else:
        for id, name, desc in personas:
            with st.expander(f"**{name}**"):
                st.text_area("Opis", value=desc, height=100, disabled=True, key=f"desc_{id}")
                if st.button("Usu≈Ñ", key=f"delete_persona_{id}"):
                    db_execute(conn, "DELETE FROM personas WHERE id = ?", (id,))
                    st.rerun()

elif st.session_state.menu_choice == "üó∫Ô∏è Strateg Tematyczny":
    st.header("üó∫Ô∏è Strateg Tematyczny")
    st.info("To narzƒôdzie analizuje wszystkie opublikowane wpisy na wybranej stronie, grupuje je w klastry tematyczne i proponuje nowe tematy, aby wype≈Çniƒá luki i wzmocniƒá autorytet w danej dziedzinie.")

    sites_list = db_execute(conn, "SELECT id, name, url, username, app_password FROM sites", fetch="all")
    sites_options = {site[1]: site for site in sites_list}

    if not sites_options:
        st.warning("Brak za≈Çadowanych stron. Przejd≈∫ do 'ZarzƒÖdzanie Stronami'.")
    else:
        site_name = st.selectbox("Wybierz stronƒô do analizy", options=sites_options.keys())

        if st.button("Analizuj i Zaplanuj Klastry", type="primary"):
            site_info = sites_options[site_name]
            decrypted_pass = decrypt_data(site_info[4])
            if decrypted_pass is None:
                st.error("‚ùå Nie mo≈ºna odszyfrowaƒá has≈Ça dla wybranej strony. Sprawd≈∫ konfiguracjƒô lub ponownie dodaj stronƒô.")
                st.stop()
            
            api = WordPressAPI(site_info[2], site_info[3], decrypted_pass)

            with st.spinner(f"Pobieranie tytu≈Ç√≥w artyku≈Ç√≥w ze strony '{site_name}'..."):
                all_posts = []
                page = 1
                while True:
                    posts_data, _ = api._make_request("posts", params={"per_page": 100, "page": page, "_fields": "title.rendered"})
                    if not posts_data:
                        break
                    all_posts.extend(posts_data)
                    page += 1
                
                all_titles = [p['title']['rendered'] for p in all_posts]

            if not all_titles:
                st.error("Nie znaleziono ≈ºadnych artyku≈Ç√≥w na tej stronie.")
            else:
                with st.spinner("AI analizuje strukturƒô tematycznƒÖ i szuka luk..."):
                    CLUSTER_ANALYSIS_PROMPT = f"""Jeste≈õ ekspertem SEO i strategiem tre≈õci specjalizujƒÖcym siƒô w optymalizacji pod AI search (GEO/AIO).

Twoim zadaniem jest analiza listy tytu≈Ç√≥w artyku≈Ç√≥w z bloga i zaproponowanie UNIKALNYCH, NIE-DUPLIKUJƒÑCYCH temat√≥w zoptymalizowanych pod systemy AI.

# KROK 1: ANALIZA I GRUPOWANIE
Przeanalizuj poni≈ºsze tytu≈Çy i pogrupuj je w logiczne klastry tematyczne:
{'- ' + '\n- '.join(all_titles)}

Nazwa klastra = og√≥lny, nadrzƒôdny temat (np. "Marketing w mediach spo≈Çeczno≈õciowych", "Pozycjonowanie lokalne", "Zdrowa dieta")

# KROK 2: IDENTYFIKACJA PRAWDZIWYCH LUK (KRYTYCZNE!)
Dla ka≈ºdego klastra okre≈õl **co NAPRAWDƒò brakuje**, a nie tylko parafrazy istniejƒÖcych temat√≥w:

‚ùå B≈ÅƒÑD - Proponowanie parafraz:
- IstniejƒÖcy: "Jak zbudowaƒá skutecznƒÖ rutynƒô anti-aging"
- ‚ùå Z≈ÅA propozycja: "Jak stworzyƒá rutynƒô anti-aging krok po kroku"
- ‚úÖ DOBRA propozycja: "Jak modyfikowaƒá rutynƒô anti-aging podczas podr√≥≈ºy s≈Çu≈ºbowych?"

Szukaj luk w:
- **Specyficzne scenariusze u≈ºycia** (podr√≥≈ºe, praca zdalna, ma≈Çe mieszkanie, bud≈ºet do 100 z≈Ç)
- **Niszowe przypadki brzegowe** (≈ÇƒÖczenie produkt√≥w, nietypowe typy sk√≥ry, choroby wsp√≥≈ÇistniejƒÖce)
- **Zaawansowane por√≥wnania** (marka A vs B, sk≈Çadnik X w r√≥≈ºnych stƒô≈ºeniach, procedura Y vs Z)
- **Problematyczne sytuacje** (efekty uboczne, co zrobiƒá gdy co≈õ nie dzia≈Ça, jak naprawiƒá b≈Çƒôdy)
- **Temporalne aspekty** (zmiany sezonowe, progresja w czasie, d≈Çugoterminowe vs kr√≥tkoterminowe efekty)
- **Aspekty ekonomiczne** (bud≈ºetowe alternatywy, stosunek ceny do jako≈õci, gdzie zaoszczƒôdziƒá)

# KROK 3: GENEROWANIE PROPOZYCJI - ZASADA ZERO-DUPLIKACJI

**ABSOLUTNIE ZABRONIONE:**
- ‚ùå Parafrazowanie istniejƒÖcych tytu≈Ç√≥w
- ‚ùå Zmiana jednego s≈Çowa w istniejƒÖcym tytule
- ‚ùå Dodanie "kompletny przewodnik" do istniejƒÖcego tematu
- ‚ùå Zmiana kolejno≈õci s≈Ç√≥w w istniejƒÖcym tytule

**PRZED dodaniem tematu do propozycji, SPRAWD≈π:**
1. Czy odpowiada na INNE pytanie ni≈º istniejƒÖce artyku≈Çy?
2. Czy zawiera NOWY kƒÖt/perspektywƒô?
3. Czy dotyczy SPECYFICZNEGO scenariusza/przypadku?
4. Czy NIE jest parafrazƒÖ ≈ºadnego z istniejƒÖcych tytu≈Ç√≥w?

**TYLKO je≈õli odpowied≈∫ na wszystkie 4 pytania to TAK - dodaj temat do propozycji.**

# KROK 4: OPTYMALIZACJA POD AI SEARCH

Ka≈ºdy proponowany temat MUSI:

1. **Byƒá ultra-specyficzny i niszowy**
   ‚úÖ "Jak stosowaƒá retinol w rutynie anti-aging je≈õli masz rozaceƒô? Bezpieczny protok√≥≈Ç"
   ‚úÖ "Witamina C w serach: 10% vs 15% vs 20% - kt√≥ra dawka dla jakiego typu sk√≥ry?"
   ‚úÖ "Jak budowaƒá rutynƒô anti-aging z bud≈ºetem 200 z≈Ç miesiƒôcznie? Priorytetyzacja zakup√≥w"
   ‚ùå "Jak stosowaƒá retinol w pielƒôgnacji?" (zbyt og√≥lne)

2. **Odpowiadaƒá na konkretne, zaawansowane pytanie**
   ‚úÖ "Co zrobiƒá gdy niacynamid powoduje zaczerwienienia? Troubleshooting + alternatywy"
   ‚úÖ "Czy mo≈ºna ≈ÇƒÖczyƒá kwas hialuronowy z retinolem w jednej rutynie? Bezpieczna kolejno≈õƒá"
   ‚ùå "Jak stosowaƒá niacynamid?" (zbyt podstawowe)

3. **Zawieraƒá mierzalne parametry lub konkretne liczby**
   ‚úÖ "Ile czasu trzeba czekaƒá miƒôdzy aplikacjƒÖ witaminy C a kremu SPF? Nauka vs praktyka"
   ‚úÖ "Jak d≈Çugo czekaƒá na efekty peptyd√≥w miedziowych? Timeline 30/60/90 dni"
   
4. **Dotyczyƒá case study lub problematycznych sytuacji**
   ‚úÖ "Purging po retinolu: jak odr√≥≈ºniƒá od prawdziwej alergii? Mapa objaw√≥w"
   ‚úÖ "Kt√≥re sk≈Çadniki aktywne nie powinny siƒô znale≈∫ƒá w jednej rutynie? Macierz kompatybilno≈õci"

# WYMAGANY FORMAT JSON

[
  {{
    "nazwa_klastra": "Nazwa nadrzƒôdnego tematu",
    "istniejace_artykuly": ["Tytu≈Ç 1", "Tytu≈Ç 2"],
    "luki_w_tresci": "Opis KONKRETNYCH luk (nie og√≥lniki). Co u≈ºytkownicy chcƒÖ wiedzieƒá, a nie znajdƒÖ w istniejƒÖcych artyku≈Çach?",
    "proponowane_nowe_tematy": [
      "Ultra-specyficzny temat 1 z jasnym kƒÖtem i kontekstem",
      "Niszowy case study 2 z mierzalnymi parametrami",
      "Zaawansowane por√≥wnanie 3 z konkretnymi liczbami",
      "Problematyczna sytuacja 4 z troubleshooting",
      "Scenariusz brzegowy 5 z praktycznymi ograniczeniami"
    ]
  }}
]

**PRZED ZWR√ìCENIEM JSON - WYKONAJ SELF-CHECK:**
Dla ka≈ºdego proponowanego tematu upewnij siƒô, ≈ºe:
- [ ] NIE jest parafrazƒÖ istniejƒÖcego tytu≈Çu
- [ ] Zawiera UNIKALNY kƒÖt/perspektywƒô
- [ ] Jest ultra-specyficzny (nie og√≥lny)
- [ ] Odpowiada na pytanie, kt√≥rego istniejƒÖce artyku≈Çy NIE pokrywajƒÖ

WYGENERUJ TERAZ KOMPLETNƒÑ ANALIZƒò W FORMACIE JSON."""
                    try:
                        response_str = call_gpt5_nano(openai_api_key, CLUSTER_ANALYSIS_PROMPT).strip().replace("```json", "").replace("```", "")
                        cluster_data = json.loads(response_str)
                        st.session_state.cluster_analysis_result = cluster_data
                    except Exception as e:
                        st.error(f"B≈ÇƒÖd podczas analizy przez AI: {e}")
                        st.session_state.cluster_analysis_result = None

    if 'cluster_analysis_result' in st.session_state and st.session_state.cluster_analysis_result:
        st.subheader("Wyniki Analizy i Propozycje Tre≈õci")
        
        all_new_topics = []
        for cluster in st.session_state.cluster_analysis_result:
            with st.expander(f"**Klaster: {cluster['nazwa_klastra']}** ({len(cluster['istniejace_artykuly'])} istniejƒÖcych, {len(cluster['proponowane_nowe_tematy'])} propozycji)"):
                st.markdown("##### IstniejƒÖce artyku≈Çy w klastrze:")
                for title in cluster['istniejace_artykuly']:
                    st.write(f"- {title}")
                
                if 'luki_w_tresci' in cluster:
                    st.markdown("##### üîç Zidentyfikowane luki w tre≈õci:")
                    st.info(cluster['luki_w_tresci'])
                
                st.markdown("##### üí° Proponowane nowe tematy (zoptymalizowane pod AI search):")
                for new_topic in cluster['proponowane_nowe_tematy']:
                    st.write(f"- **{new_topic}**")
                    all_new_topics.append(new_topic)

        st.subheader("Akcje")
        if all_new_topics:
            if st.button("Dodaj wszystkie proponowane tematy do Generatora Brief√≥w", type="primary"):
                if 'topics_from_strategist' not in st.session_state:
                    st.session_state.topics_from_strategist = ""
                
                existing_topics = st.session_state.topics_from_strategist.split('\n')
                new_topics_set = set(all_new_topics)
                
                final_topics = existing_topics + [t for t in new_topics_set if t not in existing_topics]
                st.session_state.topics_from_strategist = "\n".join(filter(None, final_topics))
                
                st.session_state.go_to_page = "Generator Brief√≥w"
                st.success(f"{len(new_topics_set)} unikalnych temat√≥w dodanych! Przechodzenie do Generatora Brief√≥w...")
                st.rerun()

elif st.session_state.menu_choice == "Generator Brief√≥w":
    st.header("üìù Generator Brief√≥w (Zoptymalizowany pod AI Search)")

    initial_topics = ""
    if 'topics_from_strategist' in st.session_state and st.session_state.topics_from_strategist:
        initial_topics = st.session_state.topics_from_strategist
        del st.session_state.topics_from_strategist

    if not (openai_api_key and google_api_key):
        st.error("Wprowad≈∫ klucz OpenAI API oraz Google AI API w panelu bocznym.")
    else:
        topics_input = st.text_area("Wprowad≈∫ tematy artyku≈Ç√≥w (jeden na liniƒô)", value=initial_topics, height=250)

        st.subheader("Ustawienia generowania")
        c1, c2 = st.columns(2)
        aspect_ratio = c1.selectbox("Format obrazka", options=["4:3", "16:9", "1:1", "3:2"])

        site_styles = {"Domy≈õlny (Fotorealizm)": ""}
        for name, style in db_execute(conn, "SELECT name, image_style_prompt FROM sites", fetch="all"):
            if style: site_styles[f"Styl: {name}"] = style
        selected_style_label = c2.selectbox("Styl wizualny obrazk√≥w", options=site_styles.keys())
        selected_style_prompt = site_styles[selected_style_label]

        if st.button("Generuj briefy i obrazki", type="primary"):
            topics = [topic.strip() for topic in topics_input.split('\n') if topic.strip()]
            if topics:
                st.session_state.generated_briefs = []
                with st.spinner(f"Generowanie {len(topics)} brief√≥w..."):
                    for topic in topics:
                        _, brief, img, err = generate_brief_and_image(openai_api_key, google_api_key, topic, aspect_ratio, selected_style_prompt, st.session_state.brief_prompt)
                        st.session_state.generated_briefs.append({ "topic": topic, "brief": brief, "image": img, "image_error": err })
                st.success("Generowanie zako≈Ñczone!")
            else: st.error("Wpisz przynajmniej jeden temat.")

        if st.session_state.generated_briefs:
            st.subheader("Wygenerowane Briefy")
            if st.button("Przejd≈∫ do generowania artyku≈Ç√≥w"):
                st.session_state.go_to_page = "Generowanie Tre≈õci"
                st.rerun()
            for i, item in enumerate(st.session_state.generated_briefs):
                with st.expander(f"**{i+1}. {item['brief'].get('temat_artykulu', item['topic'])}**"):
                    c1, c2 = st.columns(2)
                    c1.json(item['brief'])
                    with c2:
                        if item['image']: st.image(item['image'], use_column_width=True)
                        if item['image_error']: st.warning(item['image_error'])

elif st.session_state.menu_choice == "Generowanie Tre≈õci":
    st.header("ü§ñ Generator Tre≈õci AI (Jednoetapowy)")
    st.info("‚ú® Artyku≈Çy generowane w JEDNYM wywo≈Çaniu API, zoptymalizowane pod AI search (GEO/AIO)")
    
    if not st.session_state.generated_briefs: 
        st.warning("Brak brief√≥w. Przejd≈∫ do 'Generator Brief√≥w'.")
    else:
        personas = {name: desc for _, name, desc in db_execute(conn, "SELECT id, name, description FROM personas", fetch="all")}
        if not personas: 
            st.error("Brak Person. Przejd≈∫ do 'ZarzƒÖdzanie Personami'.")
        else:
            c1, c2 = st.columns(2)
            persona_name = c1.selectbox("Wybierz Personƒô autora", options=personas.keys())
            c2.info("Model: **gpt-5-nano** (Single-pass generation)")

            valid_briefs = [b for b in st.session_state.generated_briefs if 'error' not in b['brief']]
            if valid_briefs:
                df = pd.DataFrame(valid_briefs)
                df['Zaznacz'] = False
                df['Temat'] = df['brief'].apply(lambda x: x.get('temat_artykulu', 'B/D'))
                df['Ma obrazek'] = df['image'].apply(lambda x: "‚úÖ" if x else "‚ùå")

                with st.form("article_generation_form"):
                    edited_df = st.data_editor(df[['Zaznacz', 'Temat', 'Ma obrazek']], hide_index=True, use_container_width=True)
                    if st.form_submit_button("Generuj zaznaczone artyku≈Çy", type="primary"):
                        indices = edited_df[edited_df.Zaznacz].index.tolist()
                        if indices:
                            tasks = []
                            for i in indices:
                                brief = valid_briefs[i]['brief']
                                relacje = brief.get("relacje_leksykalne", {})
                                
                                prompt = st.session_state.master_prompt \
                                    .replace("{{PERSONA_DESCRIPTION}}", personas[persona_name]) \
                                    .replace("{{TEMAT_ARTYKULU}}", brief.get("temat_artykulu", "")) \
                                    .replace("{{ANALIZA_TEMATU}}", "SZEROKI" if "szeroki" in brief.get("analiza_tematu", "").lower() else "WƒÑSKI") \
                                    .replace("{{GRUPA_DOCELOWA}}", brief.get("grupa_docelowa", "")) \
                                    .replace("{{ZAGADNIENIA_KLUCZOWE}}", "\n".join(f"- {z}" for z in brief.get("zagadnienia_kluczowe", []))) \
                                    .replace("{{SLOWA_KLUCZOWE}}", ", ".join(brief.get("slowa_kluczowe", []))) \
                                    .replace("{{DODATKOWE_SLOWA_SEMANTYCZNE}}", ", ".join(brief.get("dodatkowe_slowa_semantyczne", []))) \
                                    .replace("{{HIPERONIMY}}", ", ".join(relacje.get("hiperonimy", []))) \
                                    .replace("{{HIPONIMY}}", ", ".join(relacje.get("hiponimy", []))) \
                                    .replace("{{SYNOMINY}}", ", ".join(relacje.get("synonimy", [])))
                                
                                tasks.append({'title': brief['temat_artykulu'], 'prompt': prompt, 'keywords': brief.get('slowa_kluczowe', []), 'image': valid_briefs[i]['image']})

                            st.session_state.generated_articles = []
                            progress_bar = st.progress(0)
                            status_text = st.empty()
                            
                            with st.spinner(f"Generowanie {len(tasks)} artyku≈Ç√≥w (jednoetapowo)..."):
                                with ThreadPoolExecutor(max_workers=5) as executor:
                                    futures = {executor.submit(generate_article_dispatcher, "gpt-5-nano", openai_api_key, t['title'], t['prompt']): t for t in tasks}
                                    completed = 0
                                    for future in as_completed(futures):
                                        task = futures[future]
                                        title, content = future.result()
                                        meta = generate_meta_tags_gpt5(openai_api_key, title, content, task['keywords'])
                                        st.session_state.generated_articles.append({"title": title, "content": content, "image": task['image'], **meta})
                                        
                                        completed += 1
                                        progress_bar.progress(completed / len(tasks))
                                        status_text.text(f"Wygenerowano {completed}/{len(tasks)} artyku≈Ç√≥w")
                            
                            progress_bar.empty()
                            status_text.empty()
                            st.success("‚úÖ Generowanie zako≈Ñczone!")
                            st.session_state.go_to_page = "Harmonogram Publikacji"
                            st.rerun()

elif st.session_state.menu_choice == "Harmonogram Publikacji":
    st.header("üóìÔ∏è Harmonogram Publikacji")
    if not st.session_state.generated_articles: st.warning("Brak wygenerowanych artyku≈Ç√≥w.")
    else:
        sites_list = db_execute(conn, "SELECT id, name, url, username, app_password FROM sites", fetch="all")
        sites_options = {site[1]: site for site in sites_list}
        if not sites_options: st.warning("Brak za≈Çadowanych stron.")
        else:
            df = pd.DataFrame(st.session_state.generated_articles)
            df['Zaznacz'] = True
            df['Ma obrazek'] = df['image'].apply(lambda x: "‚úÖ" if x else "‚ùå")

            with st.form("bulk_schedule_form"):
                st.subheader("1. Wybierz artyku≈Çy do publikacji")
                edited_df = st.data_editor(df[['Zaznacz', 'title', 'Ma obrazek', 'meta_title', 'meta_description']], hide_index=True, use_container_width=True, column_config={"title": "Tytu≈Ç", "Ma obrazek": st.column_config.TextColumn("Obrazek", width="small"), "meta_title": "Meta Tytu≈Ç", "meta_description": "Meta Opis"})

                st.subheader("2. Ustawienia publikacji")
                c1, c2 = st.columns(2)
                selected_sites = c1.multiselect("Wybierz strony docelowe", options=sites_options.keys())
                author_id = c2.number_input("ID Autora (opcjonalnie)", min_value=1, step=1)

                cat_site = st.selectbox("Pobierz kategorie ze strony:", options=sites_options.keys())
                cat_site_info = sites_options[cat_site]
                decrypted_cat_pass = decrypt_data(cat_site_info[4])
                if decrypted_cat_pass is None:
                    st.error(f"‚ùå Nie mo≈ºna odszyfrowaƒá has≈Ça dla '{cat_site}'. Pomi≈Ñ lub napraw konfiguracjƒô.")
                    categories = {}
                else:
                    api = WordPressAPI(cat_site_info[2], cat_site_info[3], decrypted_cat_pass)
                    categories = api.get_categories()
                selected_cats = st.multiselect("Wybierz kategorie", options=categories.keys())
                tags_str = st.text_input("Tagi (oddzielone przecinkami)")

                st.subheader("3. Planowanie")
                c1,c2,c3 = st.columns(3)
                start_date_val = c1.date_input("Data pierwszego wpisu", datetime.now())
                start_time_val = c2.time_input("Godzina pierwszego wpisu", datetime.now().time())
                interval = c3.number_input("Odstƒôp (godziny)", min_value=1, value=8)

                if st.form_submit_button("Zaplanuj zaznaczone artyku≈Çy", type="primary"):
                    selected = edited_df[edited_df.Zaznacz]
                    if not selected.empty and selected_sites:
                        pub_time = datetime.combine(start_date_val, start_time_val)
                        tags_list = [tag.strip() for tag in tags_str.split(',') if tag.strip()]

                        with st.spinner("Planowanie publikacji..."):
                            for index, row in selected.iterrows():
                                article = st.session_state.generated_articles[index]
                                for site_name in selected_sites:
                                    site_info = sites_options[site_name]
                                    decrypted_pub_pass = decrypt_data(site_info[4])
                                    if decrypted_pub_pass is None:
                                        st.error(f"‚ùå [{site_name}]: Nie mo≈ºna odszyfrowaƒá has≈Ça. Pomijam tƒô stronƒô.")
                                        continue
                                    
                                    api_pub = WordPressAPI(site_info[2], site_info[3], decrypted_pub_pass)
                                    
                                    site_cats = api_pub.get_categories()
                                    cat_ids = [site_cats[name] for name in selected_cats if name in site_cats]

                                    success, msg, _ = api_pub.publish_post(
                                        title=row['title'],
                                        content=article['content'],
                                        status="future",
                                        publish_date=pub_time.isoformat(),
                                        category_ids=cat_ids,
                                        tags=tags_list,
                                        author_id=(author_id if author_id > 0 else None),
                                        featured_image_bytes=article.get('image'),
                                        meta_title=row['meta_title'],
                                        meta_description=row['meta_description']
                                    )
                                    if success: st.success(f"[{site_name}]: {msg}")
                                    else: st.error(f"[{site_name}]: {msg}")
                                
                                pub_time += timedelta(hours=interval)
                        st.balloons()

elif st.session_state.menu_choice == "ZarzƒÖdzanie Tre≈õciƒÖ":
    st.header("‚úèÔ∏è ZarzƒÖdzanie Tre≈õciƒÖ")
    sites_list = db_execute(conn, "SELECT id, name, url, username, app_password FROM sites", fetch="all")
    sites_options = {site[1]: site for site in sites_list}
    if sites_options:
        site_name = st.selectbox("Wybierz stronƒô", options=sites_options.keys())
        site_info = sites_options[site_name]
        decrypted_content_pass = decrypt_data(site_info[4])
        
        if decrypted_content_pass is None:
            st.error("‚ùå Nie mo≈ºna odszyfrowaƒá has≈Ça dla wybranej strony. Sprawd≈∫ konfiguracjƒô lub ponownie dodaj stronƒô.")
            st.stop()
        
        api = WordPressAPI(site_info[2], site_info[3], decrypted_content_pass)

        @st.cache_data(ttl=300)
        def get_site_content(_site_name):
            posts, categories, users = api.get_posts(per_page=100), api.get_categories(), api.get_users()
            return posts, categories, users

        posts, categories, users = get_site_content(site_name)
        if posts:
            df = pd.DataFrame(posts)
            df['Zaznacz'] = False
            edited_df = st.data_editor(df[['Zaznacz', 'id', 'title', 'date', 'author_name', 'categories']].rename(columns={'author_name': 'autor'}), disabled=['id', 'title', 'date', 'autor', 'categories'], hide_index=True)
            selected_posts = edited_df[edited_df.Zaznacz]
            if not selected_posts.empty:
                with st.form("bulk_edit_form"):
                    st.subheader(f"Masowa edycja dla {len(selected_posts)} wpis√≥w")
                    new_cats = st.multiselect("ZastƒÖp kategorie", options=categories.keys())
                    new_author = st.selectbox("Zmie≈Ñ autora", options=[None] + list(users.keys()))
                    if st.form_submit_button("Wykonaj"):
                        data = {}
                        if new_cats: data['categories'] = [categories[c] for c in new_cats]
                        if new_author: data['author'] = users[new_author]
                        if data:
                            with st.spinner("Aktualizowanie..."):
                                for post_id in selected_posts['id']:
                                    success, msg = api.update_post(post_id, data)
                                    if success: st.success(msg)
                                    else: st.error(msg)
                            st.cache_data.clear()
                            st.rerun()

elif st.session_state.menu_choice == "‚öôÔ∏è Edytor Prompt√≥w":
    st.header("‚öôÔ∏è Edytor Prompt√≥w (AI Search Optimized)")
    st.info("Dostosuj szablony prompt√≥w zoptymalizowane pod AI search. Zmiany sƒÖ aktywne w bie≈ºƒÖcej sesji.")
    
    tab1, tab2 = st.tabs(["Master Prompt (Artyku≈Çy)", "Prompt do Briefu"])
    
    with tab1:
        st.subheader("Master Prompt do generowania artyku≈Ç√≥w (Jednoetapowy)")
        st.markdown("**Zmienne:** `{{PERSONA_DESCRIPTION}}`, `{{TEMAT_ARTYKULU}}`, `{{ANALIZA_TEMATU}}`, `{{GRUPA_DOCELOWA}}`, `{{ZAGADNIENIA_KLUCZOWE}}`, `{{SLOWA_KLUCZOWE}}`, `{{DODATKOWE_SLOWA_SEMANTYCZNE}}`, `{{HIPERONIMY}}`, `{{HIPONIMY}}`, `{{SYNOMINY}}`")
        
        with st.expander("üìñ Kluczowe zasady optymalizacji pod AI search"):
            st.markdown("""
            - **Answer-First**: Pierwszy akapit zawiera bezpo≈õredniƒÖ odpowied≈∫
            - **Modu≈Çowa struktura**: H2/H3 jako granice content slices dla AI parsing
            - **Q&A format**: Pytania jako nag≈Ç√≥wki, kr√≥tkie odpowiedzi (snippable)
            - **Semantyczna jasno≈õƒá**: Konkret zamiast og√≥lnika, mierzalne dane
            - **Relacje leksykalne**: Synonimy, hiperonimy, hiponimy dla wzmocnienia kontekstu
            - **Proste formatowanie**: Unikaj ozdobnik√≥w, em dash, d≈Çugich zda≈Ñ
            - **E-E-A-T signals**: Do≈õwiadczenie, ekspertyza, autorytatywno≈õƒá, zaufanie
            """)
        
        st.session_state.master_prompt = st.text_area("Edytuj Master Prompt", value=st.session_state.master_prompt, height=600, label_visibility="collapsed")
        if st.button("Przywr√≥ƒá domy≈õlny Master Prompt"):
            st.session_state.master_prompt = DEFAULT_MASTER_PROMPT_TEMPLATE
            st.rerun()
    
    with tab2:
        st.subheader("Prompt do generowania briefu")
        st.markdown("**Zmienne:** `{{TOPIC}}`")
        st.session_state.brief_prompt = st.text_area("Edytuj Prompt do Briefu", value=st.session_state.brief_prompt, height=600, label_visibility="collapsed")
        if st.button("Przywr√≥ƒá domy≈õlny Prompt do Briefu"):
            st.session_state.brief_prompt = DEFAULT_BRIEF_PROMPT_TEMPLATE
            st.rerun()
